# 方法1

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def zhijing(root):
            if not root:
                return 0
            return 1+max(zhijing(root.left),zhijing(root.right))
        
        if not root:
            return 0
        return max(zhijing(root.left)+zhijing(root.right),self.diameterOfBinaryTree(root.left),self.diameterOfBinaryTree(root.right))
        
# 方法2
# 方法1计算maxDepth的状态可以时刻记录下来，即时刻更新res，时间可以下降到O(N)
# 即可以在算maxDepth的时候不是像方法1一样每次都重新算，而是将其用L和R存起来

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.res = 0
        
        def maxDepth(node):
            if not node:
                return 0
            L = maxDepth(node.left)
            R = maxDepth(node.right)
            self.res = max(self.res, L + R)
            return max(L, R) + 1
        
        maxDepth(root)
        return self.res
