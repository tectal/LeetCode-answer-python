# 方法1
# 递归思想
# 两棵树对称，几种可能：均为None，symmetric；左孩子，右孩子都不存在，并且值相等，symmetric；右子树和另一棵树的左子树相等，左子树和另一颗树的右子树相等
# 时间复杂度: O(N)  空间复杂度: O(1)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        return self.symmetric(root.left,root.right)
    
    def symmetric(self, l1, l2):
        if not l1 or not l2:
            if not l1 and not l2:
                return True
            else:
                return False
        
        if l1.val == l2.val:
            return self.symmetric(l1.left,l2.right) and self.symmetric(l1.right,l2.left)
        else:
            return False

# 方法2
# 迭代思想
# 时间复杂度: O(N)  空间复杂度: O(1)

class Solution:
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        lst = []
        lst.append(root)
        lst.append(root)
        while lst:
            t1 = lst.pop() if lst else None
            t2 = lst.pop() if lst else None
            if not t1 and not t2: continue
            if not t1 or not t2: return False
            if t1.val != t2.val: return False
            lst.append(t1.left)
            lst.append(t2.right)
            lst.append(t1.right)
            lst.append(t2.left)
        return True
