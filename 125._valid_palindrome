# 方法1

class Solution:
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        a = ''
        s = s.lower()
        for i in s:
            if 'a' <= i <= 'z' or '0' <= i <= '9':
                a += i
        return a==a[::-1]
        
# 方法2
class Solution:
    def isPalindrome(self, s):
        s = ''.join(e for e in s if e.isalnum()).lower()
        return s==s[::-1]
        
# 方法3
# 正则,详见re.sub()用法
class Solution:
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        s = re.sub('[^0-9a-zA-Z]','',s).lower()
        return s == s[::-1]
        
# 方法4
# 双指针in-place
# 时间复杂度：O(n), 空间复杂度：O(1)
class Solution:
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        l,r = 0, len(s)-1
        while l<r:
            while l<r and not s[r].isalnum():
                r -= 1
            while l<r and not s[l].isalnum():
                l += 1
            if s[l].lower() != s[r].lower():
                return False
            l += 1
            r -= 1
        return True
