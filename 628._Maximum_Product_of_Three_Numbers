# 方法1

class Solution:
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        if nums[-1] <= 0:
            return nums[-1]*nums[-2]*nums[-3]
        else:
            if nums[0] >= 0:
                return nums[-1]*nums[-2]*nums[-3]
            else:
                if nums[1] >= 0:
                    return nums[-1]*nums[-2]*nums[-3]
                else:
                    return max(nums[0]*nums[1]*nums[-1],nums[-1]*nums[-2]*nums[-3])
                    
# 方法2

class Solution:
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])
        
# 方法3
# 用size为3的最小堆储存最大的3个数和size为2的最大堆储存最小的2个数

from heapq import *
class Solution:
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """   
        max_heap, min_heap = sorted(nums[:3]), [-i for i in sorted(nums[:3])[:2]]
        for num in nums[3:]:
            if num > max_heap[0]:
                heappop(max_heap)
                heappush(max_heap, num)
            if num < -min_heap[0]:
                heappop(min_heap)
                heappush(min_heap, -num)
        return max(max_heap[0] * max_heap[1] * max_heap[2], min_heap[0] * min_heap[1] * max(max_heap))
