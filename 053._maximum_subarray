# 方法1
# 时间复杂度: O(N)  空间复杂度: O(1)

class Solution:
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_sum, max_end = nums[0], nums[0]
        for i in range(1, len(nums)):
            max_end = max(max_end + nums[i], nums[i])
            max_sum = max(max_sum, max_end)
        return max_sum
 
# 方法2
# 动态规划（只关注：当前值和当前值+过去的状态，总和是变大还是变小）
# ms(i) = max(ms[i-1]+ a[i],a[i])
# 到i处的最大值两个可能，一个是加上a[i], 另一个从a[i]起头，重新开始。
# 时间复杂度: O(N)  空间复杂度: O(1)

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        maxSum = [nums[0] for i in range(n)]
        for i in range(1, n):
            maxSum[i] = max(maxSum[i - 1] + nums[i], nums[i])
        return max(maxSum)
