# 方法1
# 时间复杂度: O(lgN)  空间复杂度: O(1)

class Solution:
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        if x == 0:
            return 0
        if x == 1:
            return 1
        l, r = 0, x - 1
        while l <= r:
            mid = l + (r-l)//2
            if mid * mid <= x and (mid+1) * (mid+1) > x:
                return mid
            elif mid * mid > x:
                r = mid - 1
            else:
                l = mid + 1

# 方法2
# 时间复杂度: O(lgN)  空间复杂度: O(1)

class Solution:
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        t = x
        while t * t > x:
            t = (t + x // t) // 2
        return t

# 方法3          
# 时间复杂度: O(lgN)  空间复杂度: O(1)
# 超时

class Solution:
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        i = 0
        while i * i <= x:
            if i * i <= x and (i + 1) * (i + 1) > x:
                return i
            i += 1
