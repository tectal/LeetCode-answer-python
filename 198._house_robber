# 方法1
# 时间复杂度：O(N)  空间复杂度：O(1)
class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        last = 0
        now = 0
        for num in nums:
            last, now = now, max(last+num, now)
        return now
        
# 方法2
# 时间复杂度：O(N)  空间复杂度：O(N)

class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        if n == 0:
            return 0
        elif n == 1:
            return nums[0]
        elif n == 2:
            return max(nums[0], nums[1])
        else:
            dp = [0 for i in range(n)]
            dp[0] = nums[0]
            dp[1] = max(nums[0],nums[1])
            for i in range(2, n):
                dp[i] = max(dp[i-1], dp[i-2] + nums[i])
        return dp[-1]
